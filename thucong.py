import string
from random import choice, choices, shuffle, randint
from time import sleep
import tkinter as tk
from tkinter import messagebox
from requests import get, post

# Gi·∫£ ƒë·ªãnh r·∫±ng b·∫°n c√≥ c√°c file:
# ho_vietnam.txt, ten_vietnam.txt, mo_ta_ve_ban.txt, mo_ta_ads.txt,
# ref.txt, email.txt
# trong c√πng th∆∞ m·ª•c v·ªõi file script Python n√†y.

# ƒê·ªçc danh s√°ch h·ªç t√™n
try:
    with open("ho_vietnam.txt", "r", encoding="utf-8") as f:
        ds_ho = [line.strip() for line in f if line.strip()]
    with open("ten_vietnam.txt", "r", encoding="utf-8") as f:
        ds_ten = [line.strip() for line in f if line.strip()]
except FileNotFoundError as e:
    messagebox.showerror("L·ªói File", f"Kh√¥ng t√¨m th·∫•y file c·∫ßn thi·∫øt: {e.filename}\nVui l√≤ng ƒë·∫£m b·∫£o c√°c file 'ho_vietnam.txt' v√† 'ten_vietnam.txt' t·ªìn t·∫°i.")
    exit()


# C·∫•u h√¨nh CAPTCHA
API_KEY_2CAPTCHA = "66c35ed461013e2e864dc603c3322523" # Thay b·∫±ng API key c·ªßa b·∫°n
SITE_KEY = "6LffITgpAAAAAMdr7L8asMGE0qitwVuLgS3xHYQp"   # Sitekey c·ªßa trang web m·ª•c ti√™u

# H√†m gi·∫£i captcha
def solve_captcha_2captcha(url_str):
    if not url_str:
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p URL c·ªßa trang web c·∫ßn gi·∫£i captcha.")
        return
    try:
        captcha_result.set("ƒêang g·ª≠i captcha...")
        root.update()

        res = post("http://2captcha.com/in.php", data={
            "key": API_KEY_2CAPTCHA,
            "method": "userrecaptcha",
            "googlekey": SITE_KEY,
            "pageurl": url_str,
            "json": 1
        }).json()

        if res["status"] != 1:
            raise Exception("G·ª≠i captcha th·∫•t b·∫°i: " + res.get("request", ""))

        request_id = res["request"]
        captcha_result.set("ƒêang ƒë·ª£i k·∫øt qu·∫£ t·ª´ 2Captcha...")
        root.update()

        for _ in range(24):
            sleep(5)
            check = get(f"http://2captcha.com/res.php?key={API_KEY_2CAPTCHA}&action=get&id={request_id}&json=1").json()
            if check["status"] == 1:
                token = check["request"]
                captcha_result.set(token)
                messagebox.showinfo("Captcha", "‚úÖ Captcha ƒë√£ gi·∫£i xong")

# ================== SHOW CODE JS L√äN ƒê·ªÇ D√ôNG DEVTOOLS =============================

#                 js_code = f"""
# // ‚úÖ D√°n ƒëo·∫°n n√†y v√†o DevTools Console sau khi Captcha ƒë√£ render
# const token_captcha = "{token}";
# document.getElementById("g-recaptcha-response").innerHTML = token_captcha;
# const recaptchaField = document.querySelector("#g-recaptcha-response");
# if (recaptchaField) {{
#     const event = new Event('input', {{ bubbles: true }});
#     recaptchaField.dispatchEvent(event);
#     console.log("‚úÖ Token captcha ƒë√£ ƒë∆∞·ª£c g√°n v√† s·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c dispatch");
# }} else {{
#     console.warn("‚ùå Kh√¥ng t√¨m th·∫•y th·∫ª #g-recaptcha-response");
# }}"""
#                 show_code_window(js_code)

# ================== SHOW CODE JS L√äN ƒê·ªÇ D√ôNG DEVTOOLS =============================

                page_url.set("")
                return
            captcha_result.set("...ƒêang ƒë·ª£i captcha...")
            root.update()

        captcha_result.set("‚ùå H·∫øt th·ªùi gian ch·ªù captcha")
    except Exception as e:
        captcha_result.set("‚ùå L·ªói: " + str(e))
        messagebox.showerror("L·ªói Captcha", str(e))


def show_code_window(code):
    popup = tk.Toplevel(root)
    popup.title("üìã JavaScript ƒë·ªÉ d√πng trong DevTools")
    popup.geometry("600x300")
    tk.Label(popup, text="D√°n ƒëo·∫°n n√†y v√†o DevTools Console:", font=("Arial", 10, "bold")).pack(pady=5)
    txt = tk.Text(popup, wrap="word", font=("Consolas", 10))
    txt.insert("1.0", code.strip())
    txt.pack(expand=True, fill="both", padx=10, pady=5)
    txt.config(state="normal")
    txt.focus_set()

# ===== H√ÄM SAO CH√âP ƒê∆Ø·ª¢C N√ÇNG C·∫§P =====
def copy_to_clipboard(event):
    """Sao ch√©p n·ªôi dung c·ªßa widget ƒë∆∞·ª£c click v√†o clipboard."""
    widget = event.widget
    text_to_copy = widget.get()
    
    if text_to_copy and not text_to_copy.startswith("L·ªói:"):
        root.clipboard_clear()
        root.clipboard_append(text_to_copy)
        
        original_text = text_to_copy
        original_state = widget.cget('state') # L∆∞u tr·∫°ng th√°i g·ªëc ('normal' ho·∫∑c 'readonly')
        
        widget.config(state='normal')
        widget.delete(0, tk.END)
        widget.insert(0, "‚úÖ ƒê√£ sao ch√©p!")
        widget.config(state='readonly')
        
        # L√™n l·ªãch kh√¥i ph·ª•c, truy·ªÅn c·∫£ tr·∫°ng th√°i g·ªëc v√†o
        root.after(1000, lambda: restore_text(widget, original_text, original_state))

def restore_text(widget, text, state):
    """Kh√¥i ph·ª•c l·∫°i vƒÉn b·∫£n v√† tr·∫°ng th√°i g·ªëc cho widget."""
    widget.config(state='normal')
    widget.delete(0, tk.END)
    widget.insert(0, text)
    widget.config(state=state) # Kh√¥i ph·ª•c l·∫°i tr·∫°ng th√°i g·ªëc
# ===============================================

# C√°c h√†m sinh d·ªØ li·ªáu
def ho():
    return choice(ds_ho)

def ten():
    return choice(ds_ten)

def sdt():
    dau_so = [
        "32", "33", "34", "35", "36", "37", "38", "39",
        "70", "76", "77", "78", "79",
        "81", "82", "83", "84", "85",
    ]
    return choice(dau_so) + ''.join(choices("0123456789", k=7))

def password(length=None):
    """
    T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n, d√†i t·ª´ 8-16 k√Ω t·ª±.
    ∆Øu ti√™n ch·ªØ v√† s·ªë nhi·ªÅu h∆°n k√Ω t·ª± ƒë·∫∑c bi·ªát.
    """
    if length is None:
        length = randint(8, 16)

    # 1. ƒê·ªãnh nghƒ©a c√°c b·ªô k√Ω t·ª±
    lowercase_chars = string.ascii_lowercase
    uppercase_chars = string.ascii_uppercase
    digits_chars = string.digits
    special_chars = "!@#$%^&*()-_=+[]{}|;:,.<>?/"
    
    # 2. ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± t·ª´ m·ªói b·ªô
    guaranteed_chars = [
        choice(lowercase_chars),
        choice(uppercase_chars),
        choice(digits_chars),
        choice(special_chars)
    ]
    
    # 3. T·∫°o m·ªôt b·ªô k√Ω t·ª± "∆∞u ti√™n" ƒë·ªÉ l·∫•p ƒë·∫ßy ph·∫ßn c√≤n l·∫°i
    #    B·∫±ng c√°ch l·∫∑p l·∫°i ch·ªØ v√† s·ªë, ch√∫ng s·∫Ω c√≥ x√°c su·∫•t ƒë∆∞·ª£c ch·ªçn cao h∆°n.
    #    V√≠ d·ª•: L·∫∑p l·∫°i 3 l·∫ßn ƒë·ªÉ tƒÉng x√°c su·∫•t l√™n 3 l·∫ßn.
    weighted_pool = (lowercase_chars + uppercase_chars + digits_chars) * 3 + special_chars
    
    # 4. L·∫•p ƒë·∫ßy ph·∫ßn c√≤n l·∫°i c·ªßa m·∫≠t kh·∫©u t·ª´ b·ªô k√Ω t·ª± ƒë√£ ƒë∆∞·ª£c ∆∞u ti√™n
    remaining_length = length - len(guaranteed_chars)
    remaining_chars = choices(weighted_pool, k=remaining_length)
    
    # 5. K·∫øt h·ª£p v√† x√°o tr·ªôn
    password_list = guaranteed_chars + remaining_chars
    shuffle(password_list)
    
    # 6. Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return "".join(password_list)

def visit():
    return choice(range(500, 10001, 10))

def username():
    try:
        data = get("https://tienichhay.net/ho-so-ngau-nhien.html").text
        return data.split("Username</td>\n\t\t\t\t<td><strong>")[1].split("</strong></td>")[0]
    except:
        return "Kh√¥ng th·ªÉ l·∫•y"

def address():
    try:
        data = get("https://tienichhay.net/ho-so-ngau-nhien.html").text
        return data.split("ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß</td>\n\t\t\t<td><strong>")[1].split("</strong></td>")[0]
    except:
        return "Kh√¥ng th·ªÉ l·∫•y"

def bio():
    try:
        with open("mo_ta_ve_ban.txt", "r", encoding="utf-8") as f:
            lines = f.readlines()
            return choice(lines).strip().split(". ", 1)[1]
    except FileNotFoundError:
        return "L·ªói: Kh√¥ng t√¨m th·∫•y file 'mo_ta_ve_ban.txt'"
    except Exception as e:
        return f"L·ªói khi ƒë·ªçc file: {e}"

def ads_desc():
    try:
        with open("mo_ta_ads.txt", "r", encoding="utf-8") as f:
            lines = f.readlines()
            return choice(lines).strip().split(". ", 1)[1]
    except FileNotFoundError:
        return "L·ªói: Kh√¥ng t√¨m th·∫•y file 'mo_ta_ads.txt'"
    except Exception as e:
        if isinstance(e, IndexError):
            with open("mo_ta_ads.txt", "r", encoding="utf-8") as f:
                 return choice(f.readlines()).strip()
        return f"L·ªói khi ƒë·ªçc file: {e}"

def read_ref():
    try:
        with open("ref.txt", "r", encoding="utf-8") as f:
            return f.readline().strip()
    except FileNotFoundError:
        return "L·ªói: Kh√¥ng t√¨m th·∫•y file 'ref.txt'"
    except Exception as e:
        return f"L·ªói ƒë·ªçc file: {e}"

def read_email():
    try:
        with open("email.txt", "r", encoding="utf-8") as f:
            return f.readline().strip()
    except FileNotFoundError:
        return "L·ªói: Kh√¥ng t√¨m th·∫•y file 'email.txt'"
    except Exception as e:
        return f"L·ªói ƒë·ªçc file: {e}"

# Giao di·ªán Tkinter
root = tk.Tk()
root.title("Tr√¨nh t·∫°o d·ªØ li·ªáu & gi·∫£i Captcha")
root.geometry("550x800")
root.resizable(False, False)

# --- Ph·∫ßn t·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n ---
fields = [
    ("T√™n", "ten"),
    ("H·ªç", "ho"),
    ("SƒêT", "sdt"),
    ("M·∫≠t kh·∫©u", "password"),
    ("ƒê·ªãa ch·ªâ", "address"),
    ("Gi·ªõi thi·ªáu", "bio"),
    ("Username", "username"),
    ("L∆∞·ª£t truy c·∫≠p", "visit"),
    ("M√¥ t·∫£ ads", "ads_desc"),
]

vars = {}
# ===== C·∫¨P NH·∫¨T V√íNG L·∫∂P ƒê·ªÇ G√ÅN S·ª∞ KI·ªÜN CHO T·∫§T C·∫¢ C√ÅC √î =====
for idx, (label, key) in enumerate(fields):
    tk.Label(root, text=label + ":").grid(row=idx, column=0, sticky="e", padx=10, pady=5)
    var = tk.StringVar()
    
    # T·∫°o widget Entry
    if key in ["bio", "ads_desc"]:
        entry_widget = tk.Entry(root, textvariable=var, width=60)
        entry_widget.grid(row=idx, column=1, pady=5, ipady=10)
    else:
        entry_widget = tk.Entry(root, textvariable=var, width=60)
        entry_widget.grid(row=idx, column=1, pady=5)
    
    # G√°n s·ª± ki·ªán click-to-copy cho widget v·ª´a t·∫°o
    entry_widget.bind("<Button-1>", copy_to_clipboard)
    
    vars[key] = var
# =============================================================

def tao_du_lieu():
    try:
        vars["ten"].set(ten())
        vars["ho"].set(ho())
        vars["sdt"].set(sdt())
        vars["password"].set(password())
        vars["address"].set(address())
        vars["bio"].set(bio())
        vars["username"].set(username())
        vars["visit"].set(visit())
        vars["ads_desc"].set(ads_desc())
    except Exception as e:
        messagebox.showerror("L·ªói", str(e))

current_row = len(fields)
tk.Button(root, text="T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n", command=tao_du_lieu, bg="#4CAF50", fg="white", width=25)\
    .grid(row=current_row, column=0, columnspan=2, pady=15)

# --- Ph·∫ßn gi·∫£i captcha ---
current_row += 1
tk.Label(root, text="URL Trang c·∫ßn gi·∫£i Captcha:").grid(row=current_row, column=0, sticky="e", padx=10, pady=5)
page_url = tk.StringVar()
tk.Entry(root, textvariable=page_url, width=60).grid(row=current_row, column=1, pady=5)

current_row += 1
tk.Button(root, text="Gi·∫£i Captcha", bg="#2196F3", fg="white", width=25,
          command=lambda: solve_captcha_2captcha(page_url.get()))\
    .grid(row=current_row, column=0, columnspan=2, pady=10)

current_row += 1
tk.Label(root, text="K·∫øt qu·∫£ Captcha (token):").grid(row=current_row, column=0, sticky="e", padx=10, pady=5)
captcha_result = tk.StringVar()
captcha_entry = tk.Entry(root, textvariable=captcha_result, width=60, state='readonly')
captcha_entry.grid(row=current_row, column=1, pady=5)
captcha_entry.bind("<Button-1>", copy_to_clipboard)

# ===== HI·ªÇN TH·ªä D·ªÆ LI·ªÜU V√Ä G√ÅN S·ª∞ KI·ªÜN CLICK-TO-COPY =====
# D√≤ng ngƒÉn c√°ch
current_row += 1
tk.Frame(height=2, bd=1, relief=tk.SUNKEN).grid(row=current_row, column=0, columnspan=2, sticky="ew", pady=10, padx=10)

# Tr∆∞·ªùng REF
current_row += 1
tk.Label(root, text="REF:").grid(row=current_row, column=0, sticky="e", padx=10, pady=5)
ref_var = tk.StringVar()
ref_var.set(read_ref())
ref_entry = tk.Entry(root, textvariable=ref_var, width=60, state='readonly', relief=tk.FLAT)
ref_entry.grid(row=current_row, column=1, pady=5)
ref_entry.bind("<Button-1>", copy_to_clipboard)

# Tr∆∞·ªùng EMAIL
current_row += 1
tk.Label(root, text="EMAIL:").grid(row=current_row, column=0, sticky="e", padx=10, pady=5)
email_var = tk.StringVar()
email_var.set(read_email())
email_entry = tk.Entry(root, textvariable=email_var, width=60, state='readonly', relief=tk.FLAT)
email_entry.grid(row=current_row, column=1, pady=5)
email_entry.bind("<Button-1>", copy_to_clipboard)
# ===============================================

root.mainloop()